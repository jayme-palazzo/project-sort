{"ast":null,"code":"import axios from 'axios';\nclass AuthService {\n  constructor() {\n    this.baseURL = 'http://localhost:5000/api/auth';\n    this.token = localStorage.getItem('token');\n\n    // Add token to all axios requests if it exists\n    if (this.token) {\n      axios.defaults.headers.common['Authorization'] = `Bearer ${this.token}`;\n    }\n  }\n  async login(email, password) {\n    try {\n      const response = await axios.post(`${this.baseURL}/login`, {\n        email,\n        password\n      });\n      this.setToken(response.data.token);\n      return response.data.user;\n    } catch (error) {\n      // Let the component handle the specific error types\n      throw error;\n    }\n  }\n  async register(username, email, password) {\n    try {\n      const response = await axios.post(`${this.baseURL}/register`, {\n        username,\n        email,\n        password\n      });\n      this.setToken(response.data.token);\n      return response.data.user;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n  logout() {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    delete axios.defaults.headers.common['Authorization'];\n  }\n  setToken(token) {\n    this.token = token;\n    localStorage.setItem('token', token);\n    axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n  }\n  isAuthenticated() {\n    return !!this.token;\n  }\n  handleError(error) {\n    var _error$response, _error$response$data;\n    return new Error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'An error occurred');\n  }\n}\nexport default new AuthService();","map":{"version":3,"names":["axios","AuthService","constructor","baseURL","token","localStorage","getItem","defaults","headers","common","login","email","password","response","post","setToken","data","user","error","register","username","handleError","logout","removeItem","setItem","isAuthenticated","_error$response","_error$response$data","Error","message"],"sources":["C:/Users/Jayme/Project Sort/repos/project-sort/client/src/services/AuthService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nclass AuthService {\r\n  constructor() {\r\n    this.baseURL = 'http://localhost:5000/api/auth';\r\n    this.token = localStorage.getItem('token');\r\n    \r\n    // Add token to all axios requests if it exists\r\n    if (this.token) {\r\n      axios.defaults.headers.common['Authorization'] = `Bearer ${this.token}`;\r\n    }\r\n  }\r\n\r\n  async login(email, password) {\r\n    try {\r\n      const response = await axios.post(`${this.baseURL}/login`, {\r\n        email,\r\n        password\r\n      });\r\n      this.setToken(response.data.token);\r\n      return response.data.user;\r\n    } catch (error) {\r\n      // Let the component handle the specific error types\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async register(username, email, password) {\r\n    try {\r\n      const response = await axios.post(`${this.baseURL}/register`, {\r\n        username,\r\n        email,\r\n        password\r\n      });\r\n      this.setToken(response.data.token);\r\n      return response.data.user;\r\n    } catch (error) {\r\n      throw this.handleError(error);\r\n    }\r\n  }\r\n\r\n  logout() {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('user');\r\n    delete axios.defaults.headers.common['Authorization'];\r\n  }\r\n\r\n  setToken(token) {\r\n    this.token = token;\r\n    localStorage.setItem('token', token);\r\n    axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n  }\r\n\r\n  isAuthenticated() {\r\n    return !!this.token;\r\n  }\r\n\r\n  handleError(error) {\r\n    return new Error(error.response?.data?.message || 'An error occurred');\r\n  }\r\n}\r\n\r\nexport default new AuthService();\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,WAAW,CAAC;EAChBC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,OAAO,GAAG,gCAAgC;IAC/C,IAAI,CAACC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;;IAE1C;IACA,IAAI,IAAI,CAACF,KAAK,EAAE;MACdJ,KAAK,CAACO,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC,GAAG,UAAU,IAAI,CAACL,KAAK,EAAE;IACzE;EACF;EAEA,MAAMM,KAAKA,CAACC,KAAK,EAAEC,QAAQ,EAAE;IAC3B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMb,KAAK,CAACc,IAAI,CAAC,GAAG,IAAI,CAACX,OAAO,QAAQ,EAAE;QACzDQ,KAAK;QACLC;MACF,CAAC,CAAC;MACF,IAAI,CAACG,QAAQ,CAACF,QAAQ,CAACG,IAAI,CAACZ,KAAK,CAAC;MAClC,OAAOS,QAAQ,CAACG,IAAI,CAACC,IAAI;IAC3B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd;MACA,MAAMA,KAAK;IACb;EACF;EAEA,MAAMC,QAAQA,CAACC,QAAQ,EAAET,KAAK,EAAEC,QAAQ,EAAE;IACxC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMb,KAAK,CAACc,IAAI,CAAC,GAAG,IAAI,CAACX,OAAO,WAAW,EAAE;QAC5DiB,QAAQ;QACRT,KAAK;QACLC;MACF,CAAC,CAAC;MACF,IAAI,CAACG,QAAQ,CAACF,QAAQ,CAACG,IAAI,CAACZ,KAAK,CAAC;MAClC,OAAOS,QAAQ,CAACG,IAAI,CAACC,IAAI;IAC3B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,MAAM,IAAI,CAACG,WAAW,CAACH,KAAK,CAAC;IAC/B;EACF;EAEAI,MAAMA,CAAA,EAAG;IACPjB,YAAY,CAACkB,UAAU,CAAC,OAAO,CAAC;IAChClB,YAAY,CAACkB,UAAU,CAAC,MAAM,CAAC;IAC/B,OAAOvB,KAAK,CAACO,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC;EACvD;EAEAM,QAAQA,CAACX,KAAK,EAAE;IACd,IAAI,CAACA,KAAK,GAAGA,KAAK;IAClBC,YAAY,CAACmB,OAAO,CAAC,OAAO,EAAEpB,KAAK,CAAC;IACpCJ,KAAK,CAACO,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC,GAAG,UAAUL,KAAK,EAAE;EACpE;EAEAqB,eAAeA,CAAA,EAAG;IAChB,OAAO,CAAC,CAAC,IAAI,CAACrB,KAAK;EACrB;EAEAiB,WAAWA,CAACH,KAAK,EAAE;IAAA,IAAAQ,eAAA,EAAAC,oBAAA;IACjB,OAAO,IAAIC,KAAK,CAAC,EAAAF,eAAA,GAAAR,KAAK,CAACL,QAAQ,cAAAa,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBV,IAAI,cAAAW,oBAAA,uBAApBA,oBAAA,CAAsBE,OAAO,KAAI,mBAAmB,CAAC;EACxE;AACF;AAEA,eAAe,IAAI5B,WAAW,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}