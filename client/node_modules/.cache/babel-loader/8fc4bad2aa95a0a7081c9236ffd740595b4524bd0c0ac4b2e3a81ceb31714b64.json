{"ast":null,"code":"import axios from 'axios';\nclass AuthService {\n  constructor() {\n    this.baseURL = 'http://localhost:5000/api/auth';\n\n    // Add axios interceptor to include token in all requests\n    axios.interceptors.request.use(config => {\n      const token = localStorage.getItem('token');\n      if (token) {\n        config.headers.Authorization = `Bearer ${token}`;\n      }\n      return config;\n    }, error => {\n      return Promise.reject(error);\n    });\n\n    // Add response interceptor to handle authentication errors\n    axios.interceptors.response.use(response => response, error => {\n      var _error$response;\n      if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n        // Clear invalid authentication data\n        this.logout();\n      }\n      return Promise.reject(error);\n    });\n  }\n  async login(email, password) {\n    try {\n      const response = await axios.post(`${this.baseURL}/login`, {\n        email,\n        password\n      });\n      if (response.data.token) {\n        localStorage.setItem('token', response.data.token);\n        localStorage.setItem('user', JSON.stringify(response.data.user));\n      }\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n  async validateToken() {\n    try {\n      const response = await axios.get(`${this.baseURL}/validate`);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n  logout() {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n  }\n  async register(username, email, password) {\n    try {\n      const response = await axios.post(`${this.baseURL}/register`, {\n        username,\n        email,\n        password\n      });\n      if (response.data.token) {\n        localStorage.setItem('token', response.data.token);\n        localStorage.setItem('user', JSON.stringify(response.data.user));\n      }\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n  handleError(error) {\n    var _error$response2, _error$response2$data;\n    return new Error(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'An error occurred');\n  }\n}\nexport default new AuthService();","map":{"version":3,"names":["axios","AuthService","constructor","baseURL","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","error","Promise","reject","response","_error$response","status","logout","login","email","password","post","data","setItem","JSON","stringify","user","handleError","validateToken","get","removeItem","register","username","_error$response2","_error$response2$data","Error","message"],"sources":["C:/Users/Jayme/Project Sort/repos/project-sort/client/src/services/AuthService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nclass AuthService {\r\n  constructor() {\r\n    this.baseURL = 'http://localhost:5000/api/auth';\r\n    \r\n    // Add axios interceptor to include token in all requests\r\n    axios.interceptors.request.use(\r\n      (config) => {\r\n        const token = localStorage.getItem('token');\r\n        if (token) {\r\n          config.headers.Authorization = `Bearer ${token}`;\r\n        }\r\n        return config;\r\n      },\r\n      (error) => {\r\n        return Promise.reject(error);\r\n      }\r\n    );\r\n\r\n    // Add response interceptor to handle authentication errors\r\n    axios.interceptors.response.use(\r\n      (response) => response,\r\n      (error) => {\r\n        if (error.response?.status === 401) {\r\n          // Clear invalid authentication data\r\n          this.logout();\r\n        }\r\n        return Promise.reject(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  async login(email, password) {\r\n    try {\r\n      const response = await axios.post(`${this.baseURL}/login`, {\r\n        email,\r\n        password,\r\n      });\r\n      if (response.data.token) {\r\n        localStorage.setItem('token', response.data.token);\r\n        localStorage.setItem('user', JSON.stringify(response.data.user));\r\n      }\r\n      return response.data;\r\n    } catch (error) {\r\n      throw this.handleError(error);\r\n    }\r\n  }\r\n\r\n  async validateToken() {\r\n    try {\r\n      const response = await axios.get(`${this.baseURL}/validate`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw this.handleError(error);\r\n    }\r\n  }\r\n\r\n  logout() {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('user');\r\n  }\r\n\r\n  async register(username, email, password) {\r\n    try {\r\n      const response = await axios.post(`${this.baseURL}/register`, {\r\n        username,\r\n        email,\r\n        password,\r\n      });\r\n      if (response.data.token) {\r\n        localStorage.setItem('token', response.data.token);\r\n        localStorage.setItem('user', JSON.stringify(response.data.user));\r\n      }\r\n      return response.data;\r\n    } catch (error) {\r\n      throw this.handleError(error);\r\n    }\r\n  }\r\n\r\n  handleError(error) {\r\n    return new Error(error.response?.data?.message || 'An error occurred');\r\n  }\r\n}\r\n\r\nexport default new AuthService();\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}