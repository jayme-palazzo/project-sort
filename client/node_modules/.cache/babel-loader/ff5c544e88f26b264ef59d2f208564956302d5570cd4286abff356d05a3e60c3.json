{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jayme\\\\Project Sort\\\\repos\\\\project-sort\\\\client\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport AuthService from '../services/AuthService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Check if user is logged in on app load\n    const token = localStorage.getItem('token');\n    const savedUser = localStorage.getItem('user');\n    if (token && savedUser) {\n      setUser(JSON.parse(savedUser));\n    }\n    setLoading(false);\n  }, []);\n  const login = async (email, password) => {\n    const user = await AuthService.login(email, password);\n    setUser(user);\n    localStorage.setItem('user', JSON.stringify(user));\n    return user;\n  };\n  const register = async (username, email, password) => {\n    const user = await AuthService.register(username, email, password);\n    setUser(user);\n    localStorage.setItem('user', JSON.stringify(user));\n    return user;\n  };\n  const logout = () => {\n    AuthService.logout();\n    setUser(null);\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      login,\n      register,\n      logout,\n      loading\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","AuthService","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","loading","setLoading","token","localStorage","getItem","savedUser","JSON","parse","login","email","password","setItem","stringify","register","username","logout","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/Jayme/Project Sort/repos/project-sort/client/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\r\nimport AuthService from '../services/AuthService';\r\n\r\nconst AuthContext = createContext(null);\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // Check if user is logged in on app load\r\n    const token = localStorage.getItem('token');\r\n    const savedUser = localStorage.getItem('user');\r\n    if (token && savedUser) {\r\n      setUser(JSON.parse(savedUser));\r\n    }\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  const login = async (email, password) => {\r\n    const user = await AuthService.login(email, password);\r\n    setUser(user);\r\n    localStorage.setItem('user', JSON.stringify(user));\r\n    return user;\r\n  };\r\n\r\n  const register = async (username, email, password) => {\r\n    const user = await AuthService.register(username, email, password);\r\n    setUser(user);\r\n    localStorage.setItem('user', JSON.stringify(user));\r\n    return user;\r\n  };\r\n\r\n  const logout = () => {\r\n    AuthService.logout();\r\n    setUser(null);\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, login, register, logout, loading }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;AAC7E,OAAOC,WAAW,MAAM,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,MAAMC,WAAW,gBAAGP,aAAa,CAAC,IAAI,CAAC;AAEvC,OAAO,MAAMQ,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACY,OAAO,EAAEC,UAAU,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EAE5CE,SAAS,CAAC,MAAM;IACd;IACA,MAAMY,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,MAAMC,SAAS,GAAGF,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;IAC9C,IAAIF,KAAK,IAAIG,SAAS,EAAE;MACtBN,OAAO,CAACO,IAAI,CAACC,KAAK,CAACF,SAAS,CAAC,CAAC;IAChC;IACAJ,UAAU,CAAC,KAAK,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMO,KAAK,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;IACvC,MAAMZ,IAAI,GAAG,MAAMP,WAAW,CAACiB,KAAK,CAACC,KAAK,EAAEC,QAAQ,CAAC;IACrDX,OAAO,CAACD,IAAI,CAAC;IACbK,YAAY,CAACQ,OAAO,CAAC,MAAM,EAAEL,IAAI,CAACM,SAAS,CAACd,IAAI,CAAC,CAAC;IAClD,OAAOA,IAAI;EACb,CAAC;EAED,MAAMe,QAAQ,GAAG,MAAAA,CAAOC,QAAQ,EAAEL,KAAK,EAAEC,QAAQ,KAAK;IACpD,MAAMZ,IAAI,GAAG,MAAMP,WAAW,CAACsB,QAAQ,CAACC,QAAQ,EAAEL,KAAK,EAAEC,QAAQ,CAAC;IAClEX,OAAO,CAACD,IAAI,CAAC;IACbK,YAAY,CAACQ,OAAO,CAAC,MAAM,EAAEL,IAAI,CAACM,SAAS,CAACd,IAAI,CAAC,CAAC;IAClD,OAAOA,IAAI;EACb,CAAC;EAED,MAAMiB,MAAM,GAAGA,CAAA,KAAM;IACnBxB,WAAW,CAACwB,MAAM,CAAC,CAAC;IACpBhB,OAAO,CAAC,IAAI,CAAC;EACf,CAAC;EAED,oBACEN,OAAA,CAACC,WAAW,CAACsB,QAAQ;IAACC,KAAK,EAAE;MAAEnB,IAAI;MAAEU,KAAK;MAAEK,QAAQ;MAAEE,MAAM;MAAEf;IAAQ,CAAE;IAAAJ,QAAA,EACrEA;EAAQ;IAAAsB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAACxB,EAAA,CAtCWF,YAAY;AAAA2B,EAAA,GAAZ3B,YAAY;AAwCzB,OAAO,MAAM4B,OAAO,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC3B,MAAMC,OAAO,GAAGpC,UAAU,CAACK,WAAW,CAAC;EACvC,IAAI,CAAC+B,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,6CAA6C,CAAC;EAChE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,OAAO;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}